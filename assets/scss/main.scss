$dark-blue: #18212a;
$blue-green: #7affd2;
$white: #fff;

section {
  &:not(:first-child) {
    padding-top: 0 !important;
  }
  &:last-child {
    padding-bottom: 0 !important;
  }
}
form {
  min-width: 50%;
  input,
  textarea {
    border: 2px solid $dark-blue;
    padding: 10px;
  }
}
hr {
  max-width: 250px;
  border-color: transparent;
  // you can create dashes from css so no need to have them in your markup
  border-bottom: 2px dashed $dark-blue;
  margin: 20px 0;
}
/****
		Components - larger blocks with smaller pieces inside the blocks
	****/
.navbar {
  z-index: 100000000;
  border-bottom: 3px solid $white;
  ul {
    justify-content: start;
  }
  li {
    margin: 0 1rem;
  }
  a {
    color: $blue-green;
  }
}

// Prarent
.items {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  text-align: left;
  margin-top: auto;
  // children of parent
  .item {
    flex: 25%;
    padding: 15px;
    text-align: center;
    // part of child
    &-title {
      color: $dark-blue;
      margin-bottom: 1rem;
    }
    // part of child
    &-btn {
      color: white;
      text-decoration: none;
      // part of a part of a child
      i {
        // inherit will pull in the value from the parent. This is also a core concept of css. The parent .btn is white so <i> will use that value automatically when using the inherit property value.
        color: inherit;
      }
    }
  }
}
// the pattern above can be easily understood using atomic design terminology. Ex. parent = atom | child = molicules | part of child = organisms
// This is just a way to describe relationships but it is a nice tool to understand design patterns and how to break them down. Breaking them down means you can build them yourself!
//http://atomicdesign.bradfrost.com/chapter-2

.card {
  padding: 20px;
  background-color: $blue-green;
  &-header {
    color: #fcfcfc;
    padding: 30px;
    width: 50%;
    margin-right: auto;
    margin-bottom: 50px;
    position: relative;
    z-index: 10000;
    &:before {
      // psudo classes like :after and :before must have a content property in order for it to work. It is stupid but it was made for a specific use case which no one uses and so this is our reality
      content: "";
      background-color: $dark-blue;
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
    }

    &:after {
      content: "";
      width: 100%;
      height: 100%;
      background-color: $blue-green;
      position: absolute;
      top: 1rem;
      left: 1rem;
      z-index: -2;
    }

    h3 {
      font-weight: 100;
    }
  }
}

.contact-information {
  min-width: 50%;
  height: 136px;
  margin: auto;
  color: $dark-blue;
  text-align: center;
  &-icons {
    margin-bottom: 2rem;
    a {
      text-decoration: none;
    }
  }
}
/****
		Partials - smaller pieces and or one offs. I would generally avoid one offs.
	****/
#thumbnailDiv {
  border-color: $white;
}
.resumeBody1 {
  background-color: $blue-green;
  border-right: 3px solid currentColor;
}

.title {
  font-size: 4em;
  line-height: 1;
}
.resumeBody2 {
  background-color: $white;
  color: $dark-blue;
}
.btn {
  background: $dark-blue;
  padding: 10px;
  border-radius: 3px;
  color: $white;
  text-align: center !important;
  font-size: 16px;
  // the width is not good just tyring to override styles that could change. Never use !important if you can help it. It is considered an anti pattern.
  width: auto !important;
  //.btn-resume is a modifier so .btn doesn't technically have smaller parts hense why it is in the partials grouping
  &-resume {
    text-decoration: none;
    display: flex;
    align-items: center;
    width: auto;
    justify-content: center;
    max-width: 250px;
  }
}
.fa-download {
  color: $white;
  font-size: 16px;
}
// This is a super handy patern to learn. Attribute selectors https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors . Now all telephone numbers will have the same look and feel. I kept the underline so it looked a little different than other click items on your page.
[href="#about"] {
  //color: $dark-blue;
  // color: pink;
}
